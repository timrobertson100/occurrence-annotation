<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.gbif.occurrence.annotation.mapper.RuleMapper">
    <resultMap id="RULE_MAP" type="Rule" autoMapping="true">
        <result property="supportedBy" column="supported_by" typeHandler="org.apache.ibatis.type.ArrayTypeHandler"/>
        <result property="contestedBy" column="contested_by" typeHandler="org.apache.ibatis.type.ArrayTypeHandler"/>
    </resultMap>

    <select id="list" resultMap="org.gbif.occurrence.annotation.mapper.RuleMapper.RULE_MAP">
        SELECT * FROM rule WHERE deleted IS NULL
        <if test="taxonKey != null" >
            AND taxon_key = #{taxonKey}
        </if>
        <if test="datasetKey != null" >
            AND dataset_key = #{datasetKey}
        </if>
        <if test="rulesetId != null" >
            AND ruleset_id = #{rulesetId}
        </if>
        <if test="projectId != null" >
            AND project_id = #{projectId}
        </if>
        <if test="comment != null" >
            AND id IN (
              SELECT DISTINCT rule_id FROM comment WHERE deleted IS NULL AND comment LIKE '%' || #{comment} || '%'
            )
        </if>
        ORDER BY created DESC LIMIT #{limit} OFFSET #{offset}
    </select>

    <select id="get" parameterType="int" resultMap="org.gbif.occurrence.annotation.mapper.RuleMapper.RULE_MAP">
        SELECT * FROM rule WHERE id = #{id}
    </select>

    <insert id="create" parameterType="Rule" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
        INSERT INTO rule (taxon_key, dataset_key, geometry, annotation, json_pred, ruleset_id, project_id, created_by, created)
        VALUES (#{taxonKey}, #{datasetKey}, #{geometry}, #{annotation}, #{jsonPred}, #{rulesetId}, #{projectId}, #{createdBy}, now())
    </insert>

    <update id="delete" parameterType="map">
        UPDATE rule SET deleted = now(), deleted_by = #{username} WHERE id = #{id} AND DELETED IS NULL
    </update>

    <update id="deleteByRuleset" parameterType="map">
        UPDATE rule SET deleted = now(), deleted_by = #{username} WHERE ruleset_id = #{rulesetId} AND DELETED IS NULL
    </update>

    <update id="deleteByProject" parameterType="map">
        UPDATE rule SET deleted = now(), deleted_by = #{username} WHERE project_id = #{projectId} AND DELETED IS NULL
    </update>

    <update id="addSupport" parameterType="map">
        UPDATE rule SET supported_by = ARRAY_APPEND(supported_by, #{username}::TEXT)
        WHERE id = #{id} AND NOT #{username} = ANY(supported_by)
    </update>

    <update id="removeSupport" parameterType="map">
        UPDATE rule SET supported_by = ARRAY_REMOVE(supported_by, #{username}::TEXT) WHERE id = #{id}
    </update>

    <update id="addContest" parameterType="map">
        UPDATE rule SET contested_by = ARRAY_APPEND(contested_by, #{username}::TEXT)
        WHERE id = #{id} AND NOT #{username} = ANY(contested_by)
    </update>

    <update id="removeContest" parameterType="map">
        UPDATE rule SET contested_by = ARRAY_REMOVE(contested_by, #{username}::TEXT) WHERE id = #{id}
    </update>

    <select id="metrics" parameterType="map" resultType="RuleMetrics">
        SELECT
          created_by AS username,
          count(*) AS ruleCount,
          count(DISTINCT dataset_key) as contextCount,
          SUM(ARRAY_LENGTH(supported_by,1)) AS supportCount,
          SUM(ARRAY_LENGTH(contested_by,1)) AS contestCount
        FROM rule
        WHERE deleted IS NULL
        <if test="taxonKey != null" >
            AND taxon_key = #{taxonKey}
        </if>
        <if test="datasetKey != null" >
            AND dataset_key = #{datasetKey}
        </if>
        <if test="rulesetId != null" >
            AND ruleset_id = #{rulesetId}
        </if>
        GROUP BY created_by
        ORDER BY ruleCount DESC
    </select>
</mapper>